server:
  port: 9080
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone:
        - http://localhost:9080/eureka
        - http://localhost:9081/eureka

spring:
  r2dbc:
    url: r2dbc:h2:mem://./testdb
  #    url: r2dbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
  #    username: root
  #    password: 123456
  activiti:
    database-schema-update: true
    history-level: full
    db-history-used: true
  aop:
    proxy-target-class: true
  main:
    lazy-initialization: false
  mvc:
    static-path-pattern: /static/**
  thymeleaf:
    mode: HTML5
    cache: false
    encoding: UTF-8
    prefix: classpath:/
  rsocket:
    server:
      port: 3001
      transport: tcp
  kafka:
    producer:
      retries: 0
      acks: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: ${spring.kafka.producer.key-serializer}
      properties:
        linger:
          ms: 0
    consumer:
      group-id: defaultConsumerGroup #默认的消费组ID
      enable-auto-commit: true #是否自动提交offset
      auto-commit-interval: 1000 #提交offset延时（接收到消息后多久提交offset）
      auto-offset-reset: latest #重置为分区中最新的offset（消费分区中产生新的数据）
      properties:
        session:
          timeout:
            ms: 120000 #消费会话超时时间（超过这个时间consumer没有发送心跳，就会触发rebalance操作）
        request:
          timeout:
            ms: 180000 #消费请求超时时间
      key-deserializer: org.apache.kafka.common.serialization.StringSerializer
      value-deserializer: ${spring.kafka.consumer.key-deserializer}
    listener:
      missing-topics-fatal: false
    bootstrap-servers: 127.0.0.1:9092
  rabbitmq:
    port: 5672
    username: wong
    password: password
    virtual-host: /
    listener:
      direct:
        acknowledge-mode: manual
    publisher-returns: true
    publisher-confirm-type: correlated
  data:
    redis:
      database: 0
      host: 127.0.0.1
      port: 6379
      password:
  cache:
    caffeine:
      spec: maximumSize=2000, expireAfterWrite=1800s
  webflux:
    static-path-pattern: /static/**
    format:
      date: yyyy-MM-dd
      time: HH:mm:ss
      datetime: yyyy-MM-dd HH:mm:ss
debug: false
logging:
  charset:
    file: UTF-8
  level:
    root: debug

# 用户变量
custom:
  api:
    response:
      key-of-error-code: error
      key-of-error-message: message
      key-of-data: message
    static-sources:
      - "/*.html"
      - "/*.ico"
      - "/**/*.html"
      - "/**/*.css"
      - "/**/*.js"
      - "/**/*.ttf"
      - "/**/*.ico"
      - "/**/*.svg"
      - "/**/*.woff2"
      - "/**/*.eot"
      - "/**/*.gz"
  # 基础设施层
  infrastructure:
    #持久化策略
    repo-strategy:
      #默认策略，一般用不到，因为面向切面编程的设计思想，ORM方式与最终载体是在PO实体类上采用注解的方式配置的
      default-strategy: r2dbc_my_sql_repo_strategy
      my-sql:
        enable: true
      lucene:
        enable: true
        root-path: lucene #${java.io.tmpdir}lucene
        clear-when-start: true