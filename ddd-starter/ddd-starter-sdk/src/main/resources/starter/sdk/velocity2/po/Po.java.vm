package ${rootPackage}.infrastructure.persistent.po.${meta.domainName};

import ${rootPackage}.common.enums.contants.BooleanEnums;
import ${rootPackage}.common.enums.db.MySqlDataTypeEnum;
import ${rootPackage}.common.enums.strategy.RepoTypeStrategyEnum;
import ${rootPackage}.common.interfaces.infrastructure.BasePo;
import ${rootPackage}.infrastructure.general.common.annotations.framework.*;
import ${rootPackage}.infrastructure.general.common.annotations.service.RepoEnabledAnnotation;
import lombok.Getter;
import lombok.Setter;

#if(!!$meta.tableComment)
/**
 * ${meta.tableComment}
 */
#end
@TableComment("${meta.tableComment}")
@Setter
@Getter
@RepoEnabledAnnotation(type = RepoTypeStrategyEnum.${meta.repoTypeStrategyEnum.name})
public class ${meta.get("ClassName")} implements BasePo<${meta.ClassName}> {
    public static final class STRUCTURE {
        public static String domainName = "${meta.domainName}";
        public static String table = "${meta.tableName}";
        public static String id = "${meta.idField}";
        public static String uuid = "uuid";
    }

#foreach($item in $meta.fieldClassMap.entrySet())
#if(!!$meta.fieldCommentMap.get(${item.key}))
    /**
     * $!{meta.fieldCommentMap.get(${item.key})}
     */
#end
    @FieldSchema(dataType = MySqlDataTypeEnum.${meta.fieldSchemaMap.get($item.key).dataType.name}, length = ${meta.fieldSchemaMap.get($item.key).length}, scale = ${meta.fieldSchemaMap.get($item.key).scale}, isNullable = BooleanEnums.EnglishCode.${meta.fieldSchemaMap.get($item.key).isNullable.name}, comment = "${meta.fieldSchemaMap.get($item.key).comment}")
#if(${strUtil.startWith(${item.value.name}, "java.lang")})
    private ${item.value.simpleName} ${item.key};
#else
    private ${item.value.name} ${item.key};
#end
#end
}
